@page "/ttt"
@using TicTacToeGame
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@using System.Timers
@using Microsoft.JSInterop
@inject IJSRuntime JS

<style>
    .field {
        /*overflow: scroll;*/
    }

    .button {
        /*width: 12vw;
        height: 12vw;*/
        padding: 0;
    }

    .game-li {
        cursor: pointer;
    }

    .game-li:hover {
        background: #eee;
    }
</style>

<div class="container-fluid">
    <div class="row">
        <div class="col-xl-3 mb-2">
            <div class="row col-12">
                <h3>Spieler @ttt.CurrentPlayer.ToString() ist dran</h3>
            </div>
            <div class="row col-12">
                <p>Verbunden mit @(connWith ?? "niemand")</p>
            </div>
            @if (connWith != null)
            {
                <div class="row col-12">
                    <p>Du bist Spieler @isPlayer.ToString()</p>
                </div>
            }
            <div class="row col-12">
                <button @onclick="() => Reset()">Neu starten</button>
                @if (connWith != null)
                {
                    <button @onclick="@(() => { hubConnection.SendAsync("Disconnect", connWith); Disconnected(connWith); })">Verbindung trennen</button>
                }
            </div>
        </div>

        <div class="field col-lg-6 col-xl-5 mb-2">
            @for (int y = 0; y < 3; y++)
            {
                <div class="row col-12 justify-content-center">
                    @for (int x = 0; x < 3; x++)
                    {
                        int tempX = x, tempY = y;   //Weil Blazor besonders ist
                        <button class="button col-4" @onclick="() => ButtonClick(tempX, tempY)">
                            <svg width="100%" viewBox="0 0 100 100">
                                @switch (ttt.Field[x, y])
                                {
                                    case Player.X:
                                        <rect height="100%" width="10" transform="rotate(45, 50, 50) translate(45)"></rect>
                                        <rect height="100%" width="10" transform="rotate(-45, 50, 50) translate(45)"></rect>
                                        break;
                                    case Player.O:
                                        <circle r="35" cy="50" cx="50" style="stroke: black;fill: none;stroke-width: 10;"></circle>
                                        break;
                                    default:
                                        break;
                                }
                            </svg>
                        </button>
                    }
                </div>
            }
        </div>

        <div class="col-lg-6 col-xl-4">
            <div class="row col-12">
                <button class="mb-1" @onclick="@(async () => await hubConnection.SendAsync("CreateGame"))">Spiel Erstellen</button>
            </div>
            <div class="row col-12">
                <ul class="list-group">
                    @foreach (string game in games)
                    {
                        <li class="game-li list-group-item" @onclick="() => Connect(game)">@game</li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">@modalTitle</h5>
                <button type="button" class="close" onclick="hideModal('modal')" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @modalText
            </div>
            <div class="modal-footer">
                <button type="button" onclick="hideModal('modal')" class="btn btn-primary">OK</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string modalTitle = "Ergebnis";
    private string modalText = "";

    // Game
    private TicTacToeGame.TicTacToe ttt = new TicTacToeGame.TicTacToe();
    private HubConnection hubConnection;
    private List<string> games = new List<string>();
    private string connWith = null;
    private Timer keepAliveTimer = new Timer(1000)
    {
        AutoReset = true
    };
    private bool successfulPing = false;
    private int faultyPings = 0;
    private Player isPlayer = Player.None;    //Player.X = Server!

    protected override async Task OnInitializedAsync()
    {
        keepAliveTimer.Elapsed += async (o, e) =>
        {
            if (connWith != null)
            {
                if (!successfulPing)
                {
                    faultyPings++;
                    if (faultyPings > 5)
                    {
                        //TODO: Errormessage
                        Disconnected(connWith);
                    }
                }
                else
                {
                    faultyPings = 0;
                }
                successfulPing = false;
                await hubConnection.SendAsync("Ping", connWith);
            }
        };

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/ttthub"))
            .Build();

        hubConnection.On<List<string>>("GameListUpdate", (games) =>
        {
            this.games = games;
            StateHasChanged();
        });

        #region Connection
        hubConnection.On<string>("PlayerJoining", async (connId) =>
        {
            //Autoaccept
            connWith = connId;
            isPlayer = Player.X;
            await hubConnection.SendAsync("AcceptJoin", connId);
            keepAliveTimer.Start();

            Reset();

            StateHasChanged();
        });

        hubConnection.On<string>("JoinAccepted", (connId) =>
        {
            connWith = connId;
            isPlayer = Player.O;
            keepAliveTimer.Start();
            StateHasChanged();
        });

        hubConnection.On<string>("PingRecv", async (connId) =>
        {
            await hubConnection.SendAsync("ACK", connId);
        });

        hubConnection.On<string>("ACKRecv", (connId) =>
        {
            successfulPing = true;
        });

        hubConnection.On<string>("Disconnected", Disconnected);
        #endregion

        #region Game
        hubConnection.On<string, Player>("Reset", (connId, p) =>
        {
            if (connId == connWith)
            {
                Reset(p);
            }
            StateHasChanged();
        });

        hubConnection.On<string, int, int>("MadeMove", (connId, x, y) =>
        {
            if (connId == connWith && ttt.CurrentPlayer != isPlayer && ttt.SetField(x, y))
            {
                CheckForWin();
                ttt.NextTurn();
            }
            StateHasChanged();
        });
        #endregion

        await hubConnection.StartAsync();
    }

    #region "overridden" game methods
    private void Reset(Player p = Player.None)
    {
        ConsoleLog(p);
        if (connWith != null && isPlayer == Player.O && p == Player.None)
        {
            ShowModal("Fehler", "Nur der Host kann neustarten");
            return;
        }
        ttt.Reset(p);
        if (connWith != null && isPlayer == Player.X)
        {
            hubConnection.SendAsync("Reset", connWith, ttt.CurrentPlayer);
        }
    }

    private void CheckForWin()
    {
        switch (ttt.CheckForWin())
        {
            case GameResult.OWon:
                ShowModal("Ergebnis", "Spieler O hat gewonnen");
                break;
            case GameResult.XWon:
                ShowModal("Ergebnis", "Spieler X hat gewonnen");
                break;
            case GameResult.Draw:
                ShowModal("Ergebnis", "Unentschieden");
                break;
            default:
                break;
        }
    }
    #endregion

    private async Task ButtonClick(int x, int y)
    {
        if (connWith != null ? ttt.CurrentPlayer == isPlayer : true)
        {
            if (ttt.SetField(x, y))
            {
                if (connWith != null)
                    await hubConnection.SendAsync("MakeMove", connWith, x, y);
                CheckForWin();
                ttt.NextTurn();
            }
            else
            {
                //TODO: wenn Feld besetzt
            }
        }
        else
        {
            //TODO: wenn nicht dran
        }
    }

    private async Task Connect(string connId)
    {
        await hubConnection.SendAsync("JoinGame", connId);
    }

    private void Disconnected(string connId)
    {
        if (connId == connWith)
        {
            connWith = null;
            keepAliveTimer.Stop();
            ttt.Reset();
            StateHasChanged();
        }
    }

    private void ShowModal(string title, string text)
    {
        modalTitle = title;
        modalText = text;
        JS.InvokeVoidAsync("showModal", "modal");
    }

    private void ConsoleLog(object o)
    {
        JS.InvokeVoidAsync("console.log", o);
    }


    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
